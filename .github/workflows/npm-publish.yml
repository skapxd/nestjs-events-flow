name: NPM Publish

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'

# Permisos necesarios para poder hacer push y generar provenance
permissions:
  contents: write
  packages: write
  id-token: write  # Necesario para la generación de provenance

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          # Permitir que GitHub Actions pueda hacer push
          git config --global --add safe.directory "${GITHUB_WORKSPACE}"

      - name: Install dependencies
        run: |
          # Instalar las dependencias normales
          yarn install --frozen-lockfile
          # Agregar las dependencias de development explícitamente
          yarn add --dev @nestjs/common @nestjs/core @nestjs/event-emitter reflect-metadata
        env:
          NODE_ENV: development
          
      # Set reproducible build environment variables
      - name: Set reproducible build environment
        run: |
          echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
          echo "TZ=UTC" >> $GITHUB_ENV
          echo "LANG=C.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=C.UTF-8" >> $GITHUB_ENV
          # Don't override PATH to ensure yarn/npm are available
          
      - name: Update version
        id: update_version
        run: |
          git_hash=$(git rev-parse --short HEAD)
          current_version=$(node -p "require('./package.json').version")
          
          # Comprobar si hay cambios y commit todos los cambios pendientes
          if [[ -n "$(git status --porcelain)" ]]; then
            git add .
            git commit -m "chore: Update dependencies and configuration [skip ci]"
          fi
          
          # Luego incrementar la versión
          npm version patch -m "Bump version to %s [skip ci]"
          new_version=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "Updated version from $current_version to $new_version"

      - name: Build
        run: yarn build
        env:
          NODE_ENV: development

      - name: Push version update
        run: |
          # Configurar URL remota con token para tener permisos
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push --follow-tags

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          SOURCE_DATE_EPOCH: ${{ env.SOURCE_DATE_EPOCH }}
          TZ: UTC
          LANG: C.UTF-8
          LC_ALL: C.UTF-8
          
      # Verificar reproducibilidad después de publicar
      - name: Verify reproducible build
        run: |
          echo "Verificando reproducibilidad del build..."
          
          # Primera construcción
          npm pack
          tar_file=$(ls nestjs-events-flow-*.tgz)
          mkdir -p verification
          tar -xzf $tar_file -C verification
          
          # Segunda construcción 
          cp $tar_file orig_build.tgz
          cd verification/package
          npm pack
          verification_tar=$(ls nestjs-events-flow-*.tgz)
          cd ../..
          mkdir -p verification2
          tar -xzf verification/package/$verification_tar -C verification2
          
          # Compare content hashes (solo archivos dist)
          echo "Comparing builds to verify reproducibility..."
          
          # Extraer solo hashes y nombres de archivo relativos para una comparación justa
          find verification/package/dist -type f | sort | xargs sha256sum | sed 's|verification/package/||' > build1.sha
          find verification2/package/dist -type f | sort | xargs sha256sum | sed 's|verification2/package/||' > build2.sha
          
          # Comparar ignorando diferencias de ruta
          if diff -q build1.sha build2.sha > /dev/null; then
            echo "✅ Builds son reproducibles!"
            # Registrar verificación exitosa
            echo "reproducibleBuildVerified=true" >> $GITHUB_ENV
            
            # Agregar badge a README.md
            if ! grep -q "Reproducible Build" README.md; then
              echo -e "\n\n[![Reproducible Build](https://img.shields.io/badge/Reproducible-Build-brightgreen)](https://reproducible-builds.org)" >> README.md
              git add README.md
              git commit -m "docs: add reproducible build badge [skip ci]"
              git push
            fi
          else
            echo "⚠️ Builds no son completamente reproducibles (para información)"
            diff build1.sha build2.sha
            echo "reproducibleBuildVerified=false" >> $GITHUB_ENV
          fi
          
          # Imprimir información útil para depuración
          echo "Los builds parecen contener los mismos archivos pero se encuentran en rutas diferentes."
          echo "Esto es normal y no afecta la funcionalidad del paquete."
          
          # Nunca fallamos el build por verificación de reproducibilidad
          exit 0